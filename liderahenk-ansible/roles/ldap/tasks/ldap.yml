- name: Set DEBIAN_FRONTEND
  shell: "export DEBIAN_FRONTEND='non-interactive'"

- name: Set slapd debconf selections
  shell: "echo '{{ item.value }}' | sudo debconf-set-selections"
  loop:
    - { value: "slapd slapd/root_password password 1" }
    - { value: "slapd slapd/root_password_again password 1" }
    - { value: "slapd slapd/generated_adminpw password 1" }
    - { value: "slapd slapd/adminpw password 1" }
    - { value: "slapd slapd/password1 password 1" }
    - { value: "slapd slapd/password2 password 1" }
    - { value: "slapd slapd/no_configuration boolean false" }
    - { value: "slapd slapd/invalid_config false" }
    - { value: "slapd slapd/domain string liderahenk.org" }
    - { value: "slapd shared/organization string liderahenk" }
    - { value: "slapd slapd/backend string MDB" }
    - { value: "slapd slapd/purge_database boolean true" }
    - { value: "slapd slapd/move_old_database boolean true" }

- name: Install slapd and ldap-utils packages
  shell: "sudo apt-get install -y slapd ldap-utils"
  register: result

- name: Check if packages were installed successfully
  debug:
    msg: "slapd and ldap-utils packages installed successfully"
  when: result.rc == 0


# - name: Install required packages
#   apt:
#     name:
#       - slapd
#       - ldap-utils
#     state: present
#   tags:
#     - ldap_install

- name: Install python3-ldap package
  apt:
    name: python3-ldap, ldap-utils
    state: present

# - name: Install slapd and ldap-utils packages
#   command: "sudo DEBIAN_FRONTEND=noninteractive dpkg-reconfigure slapd"
#   args:
#     creates: /etc/ldap/slapd.d
#   tags:
#     - ldap_install

# - name: Set slapd debconf selections
#   debconf:
#     name: slapd
#     question: "{{ item.question }}"
#     value: "{{ item.value }}"
#     vtype: "{{ item.vtype }}"
#   with_items:
#     - { question: "slapd slapd/root_password", value: "1", vtype: "password" }
#     - { question: "slapd slapd/root_password_again", value: "1", vtype: "password" }
#     - { question: "slapd slapd/generated_adminpw", value: "1", vtype: "password" }
#     - { question: "slapd slapd/adminpw", value: "1", vtype: "password" }
#     - { question: "slapd slapd/password1", value: "1", vtype: "password" }
#     - { question: "slapd slapd/password2", value: "1", vtype: "password" }
#     - { question: "slapd slapd/no_configuration", value: "false", vtype: "boolean" }
#     - { question: "slapd slapd/invalid_config", value: "false", vtype: "boolean" }
#     - { question: "slapd slapd/domain", value: "liderahenk.org", vtype: "string" }
#     - { question: "slapd shared/organization", value: "liderahenk", vtype: "string" }
#     - { question: "slapd slapd/backend", value: "MDB", vtype: "string" }
#     - { question: "slapd slapd/purge_database", value: "true", vtype: "boolean" }
#     - { question: "slapd slapd/move_old_database", value: "true", vtype: "boolean" }
#   tags:
#     - ldap_install

  
- name: Restart LDAP Service
  service:
    name: slapd
    state: restarted
    enabled: yes

# # ldapconfig_temp doldur çalıştır 
##################################
# TUNCAY ABİ ÇALIŞMA
######################################



# - name: Transfer the bash script to the remote host
#   copy:
#     src: ldapconfig_temp.sh.j2
#     dest: /tmp/ldapconfig_temp.sh
#     mode: "0755"  # Make the script executable
#   become: true


# - name: Transfer the bash script to the remote host
#   template:
#     src: liderahenk.ldif.j2
#     dest: /tmp/liderahenk.ldif
#     #mode: "0755"  # Make the script executable
#   become: true

# - name: Execute the script
#   shell: 
#     cmd: /tmp/ldapconfig_temp.sh
#     # vars:
#     #   foldername: "{{ folder_name }}"
#   become: true

# - name: Run the bash script with variables
#   shell: /tmp/ldapconfig_temp.sh
#   become: true

############################
# - name: Transfer the bash script to the remote host
#   copy:
#     src: roles/ldap/templates/test.sh.j2
#     dest: /tmp/test.sh
#     mode: "0755"  # Make the script executable
#   become: true

# - name: Execute the script with multiple parameters
#   shell: /tmp/test.sh
#   become: true


- name: Transfer the bash script template to the remote host
  template:
    src: ldapconfig_temp.sh.j2
    dest: /tmp/ldapconfig_temp.sh
    mode: "0755"  # Make the script executable
  become: true

- name: Transfer the bash script template to the remote host
  template:
    src: liderahenk.ldif.j2
    dest: /tmp/liderahenk.ldif
    mode: "0755"  # Make the script executable
  become: true

- name: Transfer the bash script template to the remote host
  template:
    src: sudo.ldif.j2
    dest: /tmp/sudo.ldif
    mode: "0755"  # Make the script executable
  become: true

- name: Execute the script
  shell: 
    cmd: /tmp/ldapconfig_temp.sh
    # vars:
    #   foldername: "{{ folder_name }}"
  become: yes



- name: Add the LDAP entry
  community.general.ldap_entry:
    dn: ou=ISMAIL,dc=liderahenk,dc=org
    objectClass:
      - organizationalUnit
      - pardusLider
      - top
    attributes:
      ou: Users
    state: present
    bind_dn: "{{ ADMINDN }}"
    bind_pw: "1"
  # delegate_to: "192.168.56.135"
  



- name: Print message
  debug:
    msg: "LDAP-server is installed succesfully"


  